货物管理系统

完成jsp页面的基础功能
登录页面：支持登录、注册、忘记密码，
仓库管理页面：支持修改仓库属性
货物管理页面：支持修改货物属性
数据管理页面：支持查看仓库变化、货物变化等数据

用户身份类型有：
最高管理员：具有全部权限
仓库管理员：仅有管理仓库的权限，支持修改仓库属性
货物管理员：仅有管理货物的权限，支持修改货物属性
普通员工：仅有货物入库和出库的权限

各属性如下：
用户：用户id，用户名username，用户密码password，用户身份类型identity
仓库：仓库id，仓库名warehouse_name，仓库地址location，储存货物数量cargo_quantity，仓库管理员admin_id
货物：货物id，货物名cargo_name，货物类型cargo_type，货物数量quantity，所在货物仓库warehouse_id

请完成java类：
LoginServlet
RegisterServlet
ForgotPasswordServlet
WarehouseServlet
CargoServlet
UserDao
WarehouseDao
CargoDao
UserBean
WarehouseBean
CargoBean
JdbcUtil



Servlet类：
public class UserServlet extends HttpServlet {
    private UserDao userDao;
    @Override
    public void init() throws ServletException {
        userDao = new UserDao();
    }
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<User> users = userDao.getAllUsers();
        if (users != null) {
            req.setAttribute("users", users);
        } else {
            req.setAttribute("errorMsg", "Failed to retrieve user list.");
        }

        RequestDispatcher dispatcher = req.getRequestDispatcher("pages/user-list.jsp");
        dispatcher.forward(req, resp);
    }

    public static void main(String[] args) {
        List<User> users = new UserDao().getAllUsers();
        for (User user : users) {
            System.out.println(user.getUsername());
        }
    }
}

JSP文件：
<%@ page import="java.util.List" %>
<%@ page import="vo.User" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<html>
<head>
    <meta charset="UTF-8">
    <title>User Manager</title>
</head>
<body>
<h1>User List</h1>
<c:if test="${not empty errorMsg}">
    <p>${errorMsg}</p>
</c:if>
<table>
    <thead>
    <tr>
        <th>ID</th>
        <th>Username</th>
    </tr>
    </thead>
    <tbody>
    <c:forEach items="${users}" var="user">
        <tr>
            <td>${user.getUsername}</td>
            <td>${user.getUsername}</td>

        </tr>
    </c:forEach>
    </tbody>
</table>
</body>

</html>

UserDao类：

public class UserDao implements IUserDao {
    @Override
    public User getUserByName(String username) {
        User user = null;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseUtil.getConnection();
            stmt = conn.prepareStatement("SELECT username FROM users WHERE username = ?");
            stmt.setString(1, username);
            rs = stmt.executeQuery();

            if (rs.next()) {
                user = new User();
                user.setUsername(rs.getString("username"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            DatabaseUtil.closeConnection(conn);
        }

        return user;
    }

    @Override
    public User getUser(String username, String password) {
        return null;
    }

    @Override
    public int getUserIdentity(String username) {
        int identity = 4;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseUtil.getConnection();
            stmt = conn.prepareStatement("SELECT identity FROM users WHERE username = ?");
            stmt.setString(1, username);
            rs = stmt.executeQuery();

            if (rs.next()) {
                identity = rs.getInt("identity");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            DatabaseUtil.closeConnection(conn);
        }

        return identity;
    }

    @Override
    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        String query = "SELECT * FROM users"; // 假设你有一个名为 users 的表来存储用户信息

        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement statement = conn.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                User user = new User();
                user.setUsername(resultSet.getString("username"));
                users.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return users;
    }


User类：
package vo;

public class User {
    private int userId;
    private String username;
    private String password;
    private int identity;

    // 构造方法
    public User() {
    }

    // Getter和Setter方法
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public int getIdentity() {
        return identity;
    }

    public void setIdentity(int identity) {
        this.identity = identity;
    }
}



怎么解决在jsp中显示所有的用户名