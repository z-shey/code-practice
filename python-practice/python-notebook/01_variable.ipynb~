{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "## 什么是变量?\n",
    "\n",
    "- 变量是用于存储和表示数据的一种基本概念。它们是用来命名和引用内存位置，以便在程序中存储、读取和修改数据。\n",
    "- 变量可以包含各种类型的数据，例如整数、浮点数、字符、字符串和布尔值等。\n",
    "- 在程序中，可以通过给变量赋值来初始化或更改其存储的值。一旦变量被创建，我们可以在代码中多次引用该变量，并根据需要进行操作。\n",
    "- 变量具有作用域，即它们在程序中的可见范围。作用域可以是全局的（在整个程序中可见）或局部的（只在特定代码块内可见）。变量的作用域决定了变量的生命周期和可访问性。\n",
    "\n",
    "使用变量可以提高代码的可读性、灵活性和可维护性。通过根据需要更改变量的值，可以使程序适应不同的输入和条件。变量还可以用于存储中间结果，进行计算和传递数据。\n",
    "\n",
    "Python中的变量是对特定值的引用，其执行过程可以简单地描述为以下几个步骤：\n",
    "1. 变量声明：在程序中定义变量时，会分配一段内存空间来存储该变量。Python中的变量不需要显式声明，只需要在第一次给变量赋值时进行定义。\n",
    "2. 赋值：将变量绑定到一个值上。在Python中，变量名实际上只是对值的引用，而不是值本身。`语法：变量名 = 变量值`。\n",
    "3. 访问：通过变量名访问值。当我们使用变量名引用变量时，Python解释器会通过变量名查找对应的值，并将其返回。\n",
    "4. 修改：在程序运行过程中，可以重新对变量赋值，以改变它所引用的值。这个新值可能会在原有的内存位置上被修改，也可能会在新的内存位置上重新分配空间。\n",
    "5. 垃圾回收：当不再有任何变量引用一个特定的值时，这个值会成为垃圾对象，Python解释器会自动回收它所占用的内存空间。\n",
    "\n",
    "需要注意的是，Python中的变量名不是强类型的，即变量名可以重新绑定到不同类型的值上，因此需要小心避免意外的变量类型错误。另外，值的可变性也会影响变量的执行过程，特别是在处理可变对象时需要特别小心。"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "53baa1e7427f2f2"
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n"
     ]
    }
   ],
   "source": [
    "age = 20\n",
    "print(age)"
   ],
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2023-12-09T15:53:07.853395200Z",
     "start_time": "2023-12-09T15:53:07.835564100Z"
    }
   },
   "id": "initial_id"
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shey Chang\n"
     ]
    }
   ],
   "source": [
    "name = \"Shey Chang\"\n",
    "print(name)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-09T15:53:07.870308700Z",
     "start_time": "2023-12-09T15:53:07.856436100Z"
    }
   },
   "id": "96c6e6a67262044c"
  },
  {
   "cell_type": "markdown",
   "source": [
    "在Python中，变量名的命名规范：\n",
    "1. 使用有意义的名称：变量名应能够清晰地表达其所代表的含义，避免使用无意义的单词或缩写。\n",
    "2. 使用小写字母：Python中的变量名通常使用小写字母。\n",
    "3. 用下划线分隔单词：如果变量名由多个单词组成，可以使用下划线（_）将其分隔，以提高可读性。\n",
    "4. 不要使用特殊字符：变量名仅限于字母、数字和下划线。不能以数字开头，也不能包含空格或其他特殊字符。\n",
    "5. 避免使用保留关键字：变量名不应与Python的保留关键字相同，以免引起冲突。例如，不要将变量命名为\"print\"或\"if\"等。\n",
    "6. 使用详细的名称：尽量使用具有描述性的名称，以便代码的可读性更强。例如，使用\"num_students\"代替\"n\"来表示学生数量。\n",
    "\n",
    "变量值的三大特性\n",
    "- id 反应的是变量在内存中的唯一编号，内存地址不同id肯定不同\n",
    "- type 变量值的类型\n",
    "- value 变量值"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "f8564c0dc1e0ad52"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Python中的对象缓存机制"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "d9ead4a889da0e45"
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "3085449013968 3085449013328\n",
      "<class 'int'> <class 'int'>\n"
     ]
    }
   ],
   "source": [
    "a = -6\n",
    "b = -6\n",
    "\n",
    "print(a == b)\n",
    "print(a is b)\n",
    "\n",
    "print(id(a), id(b))\n",
    "\n",
    "print(type(a), type(b))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-09T15:53:07.884970200Z",
     "start_time": "2023-12-09T15:53:07.869310500Z"
    }
   },
   "id": "841d1810248caaf8"
  },
  {
   "cell_type": "markdown",
   "source": [
    "在PyCharm中显示是一样的，但是在IDLE中是不一样的，说明PyCharm对Python进行了一些优化\n",
    "Python在内部对一些常用的对象进行了缓存，以提高性能和节省内存\n",
    "具体来说，对于范围在-5到256之间的整数对象，它们会被提前创建并缓存，因此多个变量引用相同的整数对象\n",
    "这就解释了为什么在这个范围内的整数变量的id是相同的\n",
    "所以在-5到256之间`a`和`b`的`id`是相同的"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "bdc8f68502ac1b4c"
  },
  {
   "cell_type": "markdown",
   "source": [
    "常量在Python中是没有专门的语法定义的，一般来说，规定大写的变量名作为常量"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "b8f6ede74f25b22b"
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Spring\n"
     ]
    }
   ],
   "source": [
    "SPRING = \"Spring\"\n",
    "print(SPRING)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-09T15:53:07.937166300Z",
     "start_time": "2023-12-09T15:53:07.885966700Z"
    }
   },
   "id": "a95dcc5d1dfc0d11"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
